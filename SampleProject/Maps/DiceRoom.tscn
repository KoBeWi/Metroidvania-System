[gd_scene load_steps=10 format=4 uid="uid://cjk52vjugqh5"]

[ext_resource type="TileSet" uid="uid://bwpcg2opya34n" path="res://SampleProject/Resources/Tileset.tres" id="1_l63o1"]
[ext_resource type="PackedScene" uid="uid://bsg0351mx3b4u" path="res://addons/MetroidvaniaSystem/Nodes/RoomInstance.tscn" id="2_b0ayl"]
[ext_resource type="PackedScene" uid="uid://ke056546dq4j" path="res://SampleProject/Objects/Dice.glb" id="3_a62rx"]
[ext_resource type="PackedScene" uid="uid://cwrf84g5mlucd" path="res://SampleProject/Objects/Portal.tscn" id="5_m5jcc"]

[sub_resource type="GDScript" id="GDScript_2fold"]
resource_name = "Dice"
script/source = "extends Area2D

# Helper for translating direction constants to vectors.
const FWD = { MetroidvaniaSystem.R: Vector2i.RIGHT, MetroidvaniaSystem.D: Vector2i.DOWN, MetroidvaniaSystem.L: Vector2i.LEFT, MetroidvaniaSystem.U: Vector2i.UP }
# Generation thread.
var generating: Thread
# The array of paths for generated maps. It's populated in thread and then assigned to Game.
var new_generated_maps: Array[String]

func _ready() -> void:
	# Open the exit if generated rooms exist.
	if not Game.get_singleton().generated_rooms.is_empty():
		%Gate.enabled = false
	
	set_process(false)

# Player touched the dice. Generation starts here.
func _on_body_entered(body: Node2D) -> void:
	# Ignore when already generating.
	if generating:
		return
	# Close the exit.
	%Gate.enabled = true
	
	# Destroy all generated rooms.
	for coords in Game.get_singleton().generated_rooms:
		MetSys.get_cell_override(coords, false).destroy()
	Game.get_singleton().generated_rooms.clear()
	
	# Start the dice animation.
	%DiceAnimator.play(&\"Spin\")
	var tween := create_tween()
	tween.tween_property(%DiceAnimator, ^\"speed_scale\", 4.0, 4.0)
	tween.tween_interval(randf_range(1.0, 2.0))
	tween.tween_property(%DiceAnimator, ^\"speed_scale\", 0.0, 2.0)
	
	# The thread that does map generation.
	generating = Thread.new()
	generating.start(generate_map)
	set_process(true)
	
	await tween.finished
	# Open the exit after the dice animation has finished. The rooms have most likely been generated by now.
	%Gate.enabled = false

# The thread method for generating maps. The algorithm is simple: pick random cell and direction and make an adjacent cell if it doesn't exist.
func generate_map():
	# Gets rid of errors. This method is thread-safe, trust me.
	Thread.set_thread_safety_checks_enabled(false)
	# The grid of generated cells. The key is cell coordinates relative to the first generated cell, the value is a bitmask of exits.
	var grid: Dictionary[Vector2i, int]
	# Distance map. The key is cell coordinate, the value is distance from the first cell.
	var distance_grid: Dictionary[Vector2i, int]
	# Initialize the first cell. This is the cell next to the Dice Room.
	# 4 = 1 << MetroidvaniaSystem.L (the way to the Dice Room).
	grid[Vector2i()] = 4
	distance_grid[Vector2i()] = 0
	
	# Create up to 10 cells. This method does not make actual cells yet, only logical ones for now.
	while grid.size() < 10:
		# Pick a random existing cell.
		var pos: Vector2i = grid.keys().pick_random()
		# Pick a random direction to go.
		var go = randi() % 4
		# The next cell as determined by the picked cell and direction.
		var next: Vector2i = pos + FWD[go]
		# Can't go further to the left than the starting point.
		if next.x < 0:
			continue
		# Ignore already existing cells.
		if next in grid:
			continue
		# If this way already exists, abort.
		if grid[pos] & 1 << go:
			continue
		
		# Assign exit to the picked cell.
		grid[pos] |= 1 << go
		# Assign opposite exit to the next cell.
		grid[next] = 1 << ((go + 2) % 4)
		# Assign distance.
		distance_grid[next] = distance_grid[pos] + 1
	
	# Get the cell data of the dice room (using unexposed stuff).
	var dice_cell_data := MetSys.map_data.get_cell_at(Vector3i(-1, -7, 2))
	# Create MapBuilder.
	var builder := MetSys.get_map_builder()
	
	# Pick the cell with the greatest distance. This is where the orb will go.
	var collectible_pos: Vector2i = distance_grid.keys().reduce(func(accum: Vector2i, pos: Vector2i):
		if distance_grid[pos] > distance_grid[accum]:
			return pos
		else:
			return accum
		, Vector2i())
	
	# Clear the old generated maps array.
	new_generated_maps.clear()
	
	# Go over every virtual cell.
	for pos in grid:
		# The coordinates are the starting room coordinates + the cell's offset.
		var coords := Vector3i(0 + pos.x, -7 + pos.y, 2)
		# Append the coordinates to generated rooms stored in Game (to keep track of what was generated).
		Game.get_singleton().generated_rooms.append(coords)
		
		# Create the cell.
		var cell := builder.create_cell(coords)
		# Assign the same color as the dice room (this is why we needed the data).
		cell.color = dice_cell_data.color
		# Go over all cell bordersof the cell and assign wall or passage based on the bitmask.
		for i in 4:
			cell.borders[i] = 1 if grid[pos] & 1 << i else 0
			# Also copy the color.
			cell.border_colors[i] = dice_cell_data.border_colors[i]
		
		# Generate a fake path for the cell.
		# All generated maps are instances of Junction.tscn, they aren't actually saved on disk.
		# The path includes:
		# - Prefix that allows to recognize the generated map (see Game.gd).
		# - Unique map ID.
		# - Config values that will be applied to the instance.
		var fake_path := \"/\".join([\"GEN\", new_generated_maps.size(), grid[pos], pos == collectible_pos])
		new_generated_maps.append(fake_path)
		cell.set_assigned_scene(fake_path)
	
	# Update the map after the generation has finished.
	builder.update_map()

func _process(delta: float) -> void:
	# Join thread when it has finished.
	if not generating.is_alive():
		generating.wait_to_finish()
		generating = null
		set_process(false)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_kd5wt"]
size = Vector2(48, 48)

[sub_resource type="Animation" id="Animation_g16o2"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0, 0)]
}

[sub_resource type="Animation" id="Animation_7j2ql"]
resource_name = "Spin"
length = 3.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5, 1, 1.5, 2, 2.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Vector3(0, 1.5708, 0), Vector3(0, 0, 1.5708), Vector3(1.5708, 0, 0), Vector3(0, -1.5708, 0), Vector3(0, 0, -1.5708), Vector3(-1.5708, 0, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_txane"]
_data = {
&"RESET": SubResource("Animation_g16o2"),
&"Spin": SubResource("Animation_7j2ql")
}

[node name="Map" type="Node2D"]

[node name="TileMap" type="Node2D" parent="."]

[node name="Foreground" type="TileMapLayer" parent="TileMap"]
use_parent_material = true
tile_map_data = PackedByteArray("AAAAAAQAAwAIAAcAAAAAAAUAAwAIAAcAAAAAAAYAAwAIAAcAAAAAAAcAAwAIAAcAAAAAAAgAAwAIAAcAAAAAAAwAAwAIAAcAAAAAAA0AAwAIAAcAAAAAAA4AAwAIAAcAAAABAAQAAwAIAAcAAAABAAUAAwAIAAcAAAABAAYAAwAIAAcAAAABAAcAAwAIAAcAAAABAAgAAwAIAAcAAAABAAwAAwAIAAcAAAABAA0AAwAIAAcAAAABAA4AAwAIAAcAAAACAAQAAwAJAAcAAAACAAUAAwAJAAcAAAACAAYAAwAJAAcAAAACAAcAAwAJAAcAAAACAAgAAwAJAAcAAAACAAwAAwAJAAsAAAACAA0AAwAIAAcAAAACAA4AAwAIAAcAAAADAAwAAwAIAAYAAAADAA0AAwAIAAcAAAADAA4AAwAIAAcAAAAEAAwAAwAIAAYAAAAEAA0AAwAIAAcAAAAEAA4AAwAIAAcAAAAFAAwAAwAIAAYAAAAFAA0AAwAIAAcAAAAFAA4AAwAIAAcAAAAGAAwAAwAIAAYAAAAGAA0AAwAIAAcAAAAGAA4AAwAIAAcAAAAHAAwAAwAIAAYAAAAHAA0AAwAIAAcAAAAHAA4AAwAIAAcAAAAIAAwAAwAIAAYAAAAIAA0AAwAIAAcAAAAIAA4AAwAIAAcAAAAJAAwAAwAIAAYAAAAJAA0AAwAIAAcAAAAJAA4AAwAIAAcAAAAKAAwAAwAIAAYAAAAKAA0AAwAIAAcAAAAKAA4AAwAIAAcAAAALAAwAAwAIAAYAAAALAA0AAwAIAAcAAAALAA4AAwAIAAcAAAAMAAwAAwAIAAYAAAAMAA0AAwAIAAcAAAAMAA4AAwAIAAcAAAANAAwAAwAIAAYAAAANAA0AAwAIAAcAAAANAA4AAwAIAAcAAAAOAAwAAwAIAAYAAAAOAA0AAwAIAAcAAAAOAA4AAwAIAAcAAAAPAAwAAwAIAAYAAAAPAA0AAwAIAAcAAAAPAA4AAwAIAAcAAAAQAAwAAwAIAAYAAAAQAA0AAwAIAAcAAAAQAA4AAwAIAAcAAAARAAwAAwAIAAYAAAARAA0AAwAIAAcAAAARAA4AAwAIAAcAAAASAAwAAwAIAAYAAAASAA0AAwAIAAcAAAASAA4AAwAIAAcAAAATAAwAAwAIAAYAAAATAA0AAwAIAAcAAAATAA4AAwAIAAcAAAAUAAwAAwAIAAYAAAAUAA0AAwAIAAcAAAAUAA4AAwAIAAcAAAAVAAwAAwAIAAYAAAAVAA0AAwAIAAcAAAAVAA4AAwAIAAcAAAAWAAwAAwAIAAYAAAAWAA0AAwAIAAcAAAAWAA4AAwAIAAcAAAAXAAwAAwAIAAYAAAAXAA0AAwAIAAcAAAAXAA4AAwAIAAcAAAAYAAwAAwAIAAYAAAAYAA0AAwAIAAcAAAAYAA4AAwAIAAcAAAAZAAwAAwAIAAYAAAAZAA0AAwAIAAcAAAAZAA4AAwAIAAcAAAAaAAwAAwAIAAYAAAAaAA0AAwAIAAcAAAAaAA4AAwAIAAcAAAAYAAUAAwAHAAcAAAAYAAYAAwAHAAcAAAAYAAcAAwAHAAcAAAAYAAgAAwAHAAgAAAAZAAUAAwAIAAcAAAAZAAYAAwAIAAcAAAAZAAcAAwAIAAcAAAAZAAgAAwAIAAgAAAAaAAUAAwAIAAcAAAAaAAYAAwAIAAcAAAAaAAcAAwAIAAcAAAAaAAgAAwAIAAgAAAAYAAMAAwAKAAoAAAACAAMAAwAJAAoAAAADAAMAAwAIAAgAAAAEAAMAAwAIAAgAAAAFAAMAAwAIAAgAAAAGAAMAAwAIAAgAAAAHAAMAAwAIAAgAAAAIAAMAAwAIAAgAAAAJAAMAAwAIAAgAAAAKAAMAAwAIAAgAAAALAAMAAwAIAAgAAAAMAAMAAwAIAAgAAAANAAMAAwAIAAgAAAAOAAMAAwAIAAgAAAAPAAMAAwAIAAgAAAAQAAMAAwAIAAgAAAARAAMAAwAIAAgAAAASAAMAAwAIAAgAAAATAAMAAwAIAAgAAAAUAAMAAwAIAAgAAAAVAAMAAwAIAAgAAAAWAAMAAwAIAAgAAAAXAAMAAwAIAAgAAAAYAAQAAwAHAAcAAAADAAAAAwAIAAcAAAABAAIAAwAIAAcAAAABAAEAAwAIAAcAAAABAAAAAwAIAAcAAAAAAAAAAwAIAAcAAAAAAAEAAwAIAAcAAAAAAAIAAwAIAAcAAAAAAAMAAwAIAAcAAAABAAMAAwAIAAcAAAACAAAAAwAIAAcAAAACAAEAAwAIAAcAAAACAAIAAwAIAAcAAAADAAIAAwAIAAcAAAADAAEAAwAIAAcAAAAEAAEAAwAIAAcAAAAEAAAAAwAIAAcAAAAFAAAAAwAIAAcAAAAFAAEAAwAIAAcAAAAFAAIAAwAIAAcAAAAEAAIAAwAIAAcAAAAGAAIAAwAIAAcAAAAGAAEAAwAIAAcAAAAGAAAAAwAIAAcAAAAHAAAAAwAIAAcAAAAHAAEAAwAIAAcAAAAHAAIAAwAIAAcAAAAIAAIAAwAIAAcAAAAIAAEAAwAIAAcAAAAIAAAAAwAIAAcAAAAJAAAAAwAIAAcAAAAJAAEAAwAIAAcAAAAJAAIAAwAIAAcAAAAKAAIAAwAIAAcAAAAKAAEAAwAIAAcAAAAKAAAAAwAIAAcAAAALAAAAAwAIAAcAAAALAAEAAwAIAAcAAAALAAIAAwAIAAcAAAAMAAIAAwAIAAcAAAAMAAEAAwAIAAcAAAAMAAAAAwAIAAcAAAANAAAAAwAIAAcAAAANAAEAAwAIAAcAAAANAAIAAwAIAAcAAAAOAAIAAwAIAAcAAAAOAAEAAwAIAAcAAAAOAAAAAwAIAAcAAAAPAAAAAwAIAAcAAAAPAAEAAwAIAAcAAAAPAAIAAwAIAAcAAAAQAAIAAwAIAAcAAAAQAAEAAwAIAAcAAAAQAAAAAwAIAAcAAAARAAAAAwAIAAcAAAARAAEAAwAIAAcAAAARAAIAAwAIAAcAAAASAAIAAwAIAAcAAAASAAEAAwAIAAcAAAASAAAAAwAIAAcAAAATAAAAAwAIAAcAAAATAAEAAwAIAAcAAAATAAIAAwAIAAcAAAAUAAIAAwAIAAcAAAAUAAEAAwAIAAcAAAAUAAAAAwAIAAcAAAAVAAAAAwAIAAcAAAAVAAEAAwAIAAcAAAAVAAIAAwAIAAcAAAAWAAIAAwAIAAcAAAAWAAEAAwAIAAcAAAAWAAAAAwAIAAcAAAAXAAAAAwAIAAcAAAAXAAEAAwAIAAcAAAAXAAIAAwAIAAcAAAAYAAIAAwAIAAcAAAAYAAEAAwAIAAcAAAAYAAAAAwAIAAcAAAAZAAAAAwAIAAcAAAAZAAEAAwAIAAcAAAAZAAIAAwAIAAcAAAAZAAMAAwAIAAcAAAAZAAQAAwAIAAcAAAAaAAQAAwAIAAcAAAAaAAMAAwAIAAcAAAAaAAIAAwAIAAcAAAAaAAEAAwAIAAcAAAAaAAAAAwAIAAcAAAAAAAkAAwAIAAcAAAABAAkAAwAIAAcAAAACAAkAAwAJAAcAAAAAAAoAAwAIAAcAAAABAAoAAwAIAAcAAAACAAoAAwAJAAcAAAAAAAsAAwAIAAcAAAABAAsAAwAIAAcAAAACAAsAAwAJAAcAAAA=")
tile_set = ExtResource("1_l63o1")

[node name="Background" type="TileMapLayer" parent="TileMap"]
z_index = -1
use_parent_material = true
tile_map_data = PackedByteArray("AAADAAQAAwAIAAEAAAADAAUAAwAIAAEAAAADAAYAAwAIAAEAAAADAAcAAwAIAAEAAAADAAgAAwAIAAEAAAADAAkAAwAIAAEAAAADAAoAAwAIAAEAAAAEAAQAAwAIAAEAAAAEAAUAAwAIAAEAAAAEAAYAAwAIAAEAAAAEAAcAAwAIAAEAAAAEAAgAAwAIAAEAAAAEAAkAAwAIAAEAAAAEAAoAAwAIAAEAAAAFAAQAAwAIAAEAAAAFAAUAAwAIAAEAAAAFAAYAAwAIAAEAAAAFAAcAAwAIAAEAAAAFAAgAAwAIAAEAAAAFAAkAAwAIAAEAAAAFAAoAAwAIAAEAAAAGAAQAAwAIAAEAAAAGAAUAAwAIAAEAAAAGAAYAAwAIAAEAAAAGAAcAAwAIAAEAAAAGAAgAAwAIAAEAAAAGAAkAAwAIAAEAAAAGAAoAAwAIAAEAAAAHAAQAAwAIAAEAAAAHAAUAAwAIAAEAAAAHAAYAAwAIAAEAAAAHAAcAAwAIAAEAAAAHAAgAAwAIAAEAAAAHAAkAAwAIAAEAAAAHAAoAAwAIAAEAAAAIAAQAAwAIAAEAAAAIAAUAAwAIAAEAAAAIAAYAAwAIAAEAAAAIAAcAAwAIAAEAAAAIAAgAAwAIAAEAAAAIAAkAAwAIAAEAAAAIAAoAAwAIAAEAAAAJAAQAAwAIAAEAAAAJAAUAAwAIAAEAAAAJAAYAAwAIAAEAAAAJAAcAAwAIAAEAAAAJAAgAAwAIAAEAAAAJAAkAAwAIAAEAAAAJAAoAAwAIAAEAAAAKAAQAAwAIAAEAAAAKAAUAAwAIAAEAAAAKAAYAAwAIAAEAAAAKAAcAAwAIAAEAAAAKAAgAAwAIAAEAAAAKAAkAAwAIAAEAAAAKAAoAAwAIAAEAAAALAAQAAwAIAAEAAAALAAUAAwAIAAEAAAALAAYAAwAIAAEAAAALAAcAAwAIAAEAAAALAAgAAwAIAAEAAAALAAkAAwAIAAEAAAALAAoAAwAIAAEAAAAMAAQAAwAIAAEAAAAMAAUAAwAIAAEAAAAMAAYAAwAIAAEAAAAMAAcAAwAIAAEAAAAMAAgAAwAIAAEAAAAMAAkAAwAIAAEAAAAMAAoAAwAIAAEAAAANAAQAAwAIAAEAAAANAAUAAwAIAAEAAAANAAYAAwAIAAEAAAANAAcAAwAIAAEAAAANAAgAAwAIAAEAAAANAAkAAwAIAAEAAAANAAoAAwAIAAEAAAAOAAQAAwAIAAEAAAAOAAUAAwAIAAEAAAAOAAYAAwAIAAEAAAAOAAcAAwAIAAEAAAAOAAgAAwAIAAEAAAAOAAkAAwAIAAEAAAAOAAoAAwAIAAEAAAAPAAQAAwAIAAEAAAAPAAUAAwAIAAEAAAAPAAYAAwAIAAEAAAAPAAcAAwAIAAEAAAAPAAgAAwAIAAEAAAAPAAkAAwAIAAEAAAAPAAoAAwAIAAEAAAAQAAQAAwAIAAEAAAAQAAUAAwAIAAEAAAAQAAYAAwAIAAEAAAAQAAcAAwAIAAEAAAAQAAgAAwAIAAEAAAAQAAkAAwAIAAEAAAAQAAoAAwAIAAEAAAARAAQAAwAIAAEAAAARAAUAAwAIAAEAAAARAAYAAwAIAAEAAAARAAcAAwAIAAEAAAARAAgAAwAIAAEAAAARAAkAAwAIAAEAAAARAAoAAwAIAAEAAAASAAQAAwAIAAEAAAASAAUAAwAIAAEAAAASAAYAAwAIAAEAAAASAAcAAwAIAAEAAAASAAgAAwAIAAEAAAASAAkAAwAIAAEAAAASAAoAAwAIAAEAAAATAAQAAwAIAAEAAAATAAUAAwAIAAEAAAATAAYAAwAIAAEAAAATAAcAAwAIAAEAAAATAAgAAwAIAAEAAAATAAkAAwAIAAEAAAATAAoAAwAIAAEAAAAUAAQAAwAIAAEAAAAUAAUAAwAIAAEAAAAUAAYAAwAIAAEAAAAUAAcAAwAIAAEAAAAUAAgAAwAIAAEAAAAUAAkAAwAIAAEAAAAUAAoAAwAIAAEAAAAVAAQAAwAIAAEAAAAVAAUAAwAIAAEAAAAVAAYAAwAIAAEAAAAVAAcAAwAIAAEAAAAVAAgAAwAIAAEAAAAVAAkAAwAIAAEAAAAVAAoAAwAIAAEAAAAWAAQAAwAIAAEAAAAWAAUAAwAIAAEAAAAWAAYAAwAIAAEAAAAWAAcAAwAIAAEAAAAWAAgAAwAIAAEAAAAWAAkAAwAIAAEAAAAWAAoAAwAIAAEAAAADAAsAAwAIAAEAAAAEAAsAAwAIAAEAAAAFAAsAAwAIAAEAAAAGAAsAAwAIAAEAAAAHAAsAAwAIAAEAAAAIAAsAAwAIAAEAAAAJAAsAAwAIAAEAAAAKAAsAAwAIAAEAAAALAAsAAwAIAAEAAAAMAAsAAwAIAAEAAAANAAsAAwAIAAEAAAAOAAsAAwAIAAEAAAAPAAsAAwAIAAEAAAAQAAsAAwAIAAEAAAARAAsAAwAIAAEAAAASAAsAAwAIAAEAAAATAAsAAwAIAAEAAAAUAAsAAwAIAAEAAAAVAAsAAwAIAAEAAAAWAAsAAwAIAAEAAAAXAAkAAwAIAAEAAAAXAAoAAwAIAAEAAAAXAAsAAwAIAAEAAAAYAAkAAwAIAAEAAAAYAAoAAwAIAAEAAAAYAAsAAwAIAAEAAAAZAAkAAwAIAAEAAAAZAAoAAwAIAAEAAAAZAAsAAwAIAAEAAAAaAAkAAwAIAAEAAAAaAAoAAwAIAAEAAAAaAAsAAwAIAAEAAAAXAAQAAwAIAAEAAAAXAAUAAwAIAAEAAAAXAAYAAwAIAAEAAAAXAAcAAwAIAAEAAAAXAAgAAwAIAAEAAAA=")
tile_set = ExtResource("1_l63o1")

[node name="Gate" type="TileMapLayer" parent="TileMap"]
unique_name_in_owner = true
use_parent_material = true
tile_map_data = PackedByteArray("AAAYAAkAAwAKAAYAAAAYAAoAAwAKAAcAAAAYAAsAAwAKAAgAAAA=")
tile_set = ExtResource("1_l63o1")

[node name="RoomInstance" parent="." instance=ExtResource("2_b0ayl")]

[node name="Dice" type="Area2D" parent="."]
position = Vector2(448, 248)
script = SubResource("GDScript_2fold")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Dice"]
shape = SubResource("RectangleShape2D_kd5wt")

[node name="SubViewportContainer" type="SubViewportContainer" parent="Dice"]
offset_left = -48.0
offset_top = -48.0
offset_right = 48.0
offset_bottom = 48.0
stretch = true

[node name="SubViewport" type="SubViewport" parent="Dice/SubViewportContainer"]
transparent_bg = true
handle_input_locally = false
size = Vector2i(96, 96)
render_target_update_mode = 4

[node name="Dice" parent="Dice/SubViewportContainer/SubViewport" instance=ExtResource("3_a62rx")]

[node name="DiceAnimator" type="AnimationPlayer" parent="Dice/SubViewportContainer/SubViewport/Dice"]
unique_name_in_owner = true
libraries = {
&"": SubResource("AnimationLibrary_txane")
}
autoplay = "Spin"
speed_scale = 0.0

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="Dice/SubViewportContainer/SubViewport"]
transform = Transform3D(0.964095, 0.0309826, -0.263743, 0, 0.993171, 0.116671, 0.265556, -0.112482, 0.957511, 0, 0, 0)

[node name="Camera3D" type="Camera3D" parent="Dice/SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 3.147)

[node name="Label" type="Label" parent="Dice"]
offset_left = -192.0
offset_top = 176.0
offset_right = 192.0
offset_bottom = 202.0
text = "Touch the Dice to randomize rooms"
horizontal_alignment = 1

[node name="Portal" parent="." instance=ExtResource("5_m5jcc")]
modulate = Color(0.207843, 0.870588, 0.121569, 1)
position = Vector2(217, 263)
target_map = "UpperElevatorRoom.tscn"

[connection signal="body_entered" from="Dice" to="Dice" method="_on_body_entered"]
