[gd_scene load_steps=14 format=3 uid="uid://dfbykrvyqnqr5"]

[ext_resource type="Script" uid="uid://cmjsph053oe5d" path="res://addons/MetroidvaniaSystem/Database/MapEditor.gd" id="1_i7yda"]
[ext_resource type="PackedScene" uid="uid://w34y4dyx84y8" path="res://addons/MetroidvaniaSystem/Nodes/LayerSelector.tscn" id="2_rinoa"]

[sub_resource type="ButtonGroup" id="ButtonGroup_pv7fp"]

[sub_resource type="GDScript" id="GDScript_dsps8"]
resource_name = "RoomLayout"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

var erase_mode: bool

var dragging_room_from: Vector2i
var dragging_room: Array[Vector3i]
var dragging_room_cells: Array[MetroidvaniaSystem.CellView]
var dragging_drawer: Node2D

func _ready() -> void:
	if is_part_of_edited_scene():
		return
	
	super()
	
	await editor.ready
	
	dragging_drawer = Node2D.new()
	editor.map_view_container.add_child(dragging_drawer)

func _editor_init() -> void:
	room_only_cursor = false

func _editor_enter():
	super()
	%Shortcuts.show()
	%ShortcutPick.hide()
	%ShortcutWhole.hide()
	%ShortcutDrag.show()

func _editor_exit():
	super()
	%Shortcuts.hide()
	%ShortcutWhole.show()
	%ShortcutDrag.hide()

func _update_theme():
	theme_cache.cursor_color = get_theme_color(&\"cursor_color\", &\"MetSys\")
	theme_cache.invalid_room_drop_position = get_theme_color(&\"invalid_room_drop_position\", &\"MetSys\")

func _editor_input(event: InputEvent):
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT:
			if event.pressed:
				if event.shift_pressed:
					var under := get_cell_at_cursor()
					if under:
						dragging_room_from = get_cursor_pos()
						dragging_room = MetSys.map_data.get_whole_room(get_coords(get_cursor_pos()))
						var begin := Vector3i.MAX
						for cell in dragging_room:
							begin = begin.min(cell)
						
						
						var diff2 := Vector3i(dragging_room_from.x, dragging_room_from.y, begin.z) - begin
						for cell in dragging_room:
							var view := MetroidvaniaSystem.CellView.new(dragging_drawer.get_canvas_item())
							dragging_room_cells.append(view)
							var diff := cell - begin - diff2
							view.offset = Vector2(diff.x, diff.y)
							view.coords = cell
							view.update()
						
						dragging_drawer.position = Vector2(dragging_room_from + editor.map_offset) * MetSys.CELL_SIZE
						set_dragging_room_visible(false)
						redraw_overlay()
				else:
					drag_from = get_cursor_pos()
			else:
				if drag_from != Vector2i.MAX:
					var rect := get_rect_between(drag_from, get_cursor_pos())
					update_rooms(rect)
					drag_from = Vector2i.MAX
				elif not dragging_room.is_empty():
					var drop_valid := get_cursor_pos() != dragging_room_from
					if drop_valid:
						for coords in dragging_room:
							var offset := get_cell_dragging_offset(coords)
							var offset3 := get_coords(offset)
							
							if not offset3 in dragging_room and MetSys.map_data.get_cell_at(offset3):
								drop_valid = false
					
					if drop_valid:
						for old_coords in dragging_room:
							var new_coords := get_coords(get_cell_dragging_offset(old_coords))
							MetSys.map_data.transfer_cell(old_coords, new_coords)
							editor.update_cell(new_coords)
							undo_handle_transfer(old_coords, new_coords)
					
					for coords in dragging_room:
						editor.update_cell(coords)
					
					set_dragging_room_visible(true)
					dragging_room.clear()
					dragging_room_cells.clear()
					undo_end_with_redraw()
		elif event.button_index == MOUSE_BUTTON_RIGHT:
			if event.pressed:
				drag_from = get_cursor_pos()
				erase_mode = true
				theme_cache.cursor_color = get_theme_color(&\"cursor_color_erase\", &\"MetSys\")
				redraw_overlay()
			else:
				var rect := get_rect_between(drag_from, get_cursor_pos())
				erase_rooms(rect)
				erase_mode = false
				theme_cache.cursor_color = get_theme_color(&\"cursor_color\", &\"MetSys\")
				drag_from = Vector2i.MAX
	elif event is InputEventMouseMotion:
		if not dragging_room.is_empty():
			dragging_drawer.position = Vector2(get_cursor_pos() + editor.map_offset) * MetSys.CELL_SIZE

func _editor_draw(map_overlay: CanvasItem):
	super(map_overlay)
	
	if dragging_room.is_empty():
		return
	
	top_draw = func(map_overlay: CanvasItem):
		map_overlay.draw_set_transform_matrix(Transform2D())
		
		for coords in dragging_room:
			var offset := get_cell_dragging_offset(coords)
			var offset3 := get_coords(offset)
			
			if not offset3 in dragging_room and MetSys.map_data.get_cell_at(offset3):
				map_overlay.draw_rect(Rect2(Vector2(editor.map_offset + offset) * MetSys.CELL_SIZE, MetSys.CELL_SIZE), theme_cache.invalid_room_drop_position)

func update_rooms(rect: Rect2i):
	var map_data: MetroidvaniaSystem.MapData = MetSys.map_data
	
	for y in range(rect.position.y, rect.end.y):
		for x in range(rect.position.x, rect.end.x):
			var coords := Vector3i(x, y, editor.current_layer)
			
			var cell = map_data.get_cell_at(coords)
			if cell:
				var prev_borders = cell.borders.duplicate()
				
				if x != rect.end.x - 1:
					cell.borders[0] = -1
				if y != rect.end.y - 1:
					cell.borders[1] = -1
				if x != rect.position.x:
					cell.borders[2] = -1
				if y != rect.position.y:
					cell.borders[3] = -1
				
				if undo_handle_cell_property(cell, &\"borders\", prev_borders):
					var prev_assign: String = MetSys.map_data.cells[coords].assigned_scene
					if not prev_assign.is_empty():
						var prev_room := remove_assign(coords)
						undo_handle_scene_add(prev_room, prev_assign)
			else:
				cell = map_data.create_cell_at(coords)
				if x == rect.end.x - 1:
					cell.borders[0] = 0
				if y == rect.end.y - 1:
					cell.borders[1] = 0
				if x == rect.position.x:
					cell.borders[2] = 0
				if y == rect.position.y:
					cell.borders[3] = 0
				
				undo_handle_cell_spawn(coords, cell)
	
	editor.update_rect(rect)
	undo_handle_rect_redraw(rect)
	undo_end()

func erase_rooms(rect: Rect2i):
	var map_data: MetroidvaniaSystem.MapData = MetSys.map_data
	
	for y in range(rect.position.y, rect.end.y):
		for x in range(rect.position.x, rect.end.x):
			var coords := Vector3i(x, y, editor.current_layer)
			var cell_data := map_data.get_cell_at(coords)
			
			if not cell_data:
				continue
			
			undo_handle_cell_erase(coords, cell_data)
			
			if x == rect.end.x - 1:
				close_border(Vector2i(x + 1, y), 2)
			if y == rect.end.y - 1:
				close_border(Vector2i(x, y + 1), 3)
			if x == rect.position.x:
				close_border(Vector2i(x - 1, y), 0)
			if y == rect.position.y:
				close_border(Vector2i(x, y - 1), 1)
			
			map_data.erase_cell(coords)
	
	if not undo_active:
		return
	
	rect = rect.grow(1)
	editor.update_rect(rect)
	undo_handle_rect_redraw(rect)
	undo_end()

func remove_assign(coords: Vector3i) -> Array[Vector3i]:
	var ret: Array[Vector3i]
	
	var assigned_scene: String = MetSys.map_data.cells[coords].assigned_scene
	if assigned_scene.is_empty():
		return ret
	
	ret.assign(MetSys.map_data.assigned_scenes[assigned_scene].duplicate())
	
	for coords2 in ret:
		MetSys.map_data.cells[coords2].assigned_scene = \"\"
	MetSys.map_data.assigned_scenes.erase(assigned_scene)
	
	return ret

func close_border(pos: Vector2i, border: int):
	var coords := get_coords(pos)
	var cell: MetroidvaniaSystem.MapData.CellData = MetSys.map_data.get_cell_at(coords)
	if cell:
		var old: Variant = cell.borders.duplicate()
		cell.borders[border] = 0
		
		if undo_handle_cell_property(cell, &\"borders\", old):
			var prev_assign: String = MetSys.map_data.cells[coords].assigned_scene
			if not prev_assign.is_empty():
				var prev_room := remove_assign(coords)
				undo_handle_scene_add(prev_room, prev_assign, true)

func get_cell_dragging_offset(coords: Vector3i) -> Vector2i:
	return get_cursor_pos() + Vector2i(coords.x, coords.y) - dragging_room_from

func set_dragging_room_visible(vis: bool):
	for coords in dragging_room:
		var cell: MetroidvaniaSystem.CellView = editor.current_map_view._cache[coords]
		cell.visible = vis
"

[sub_resource type="GDScript" id="GDScript_tlx5u"]
resource_name = "CellColor"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/CellPaintEditor.gd\"

func _editor_init() -> void:
	super()
	can_pick = true

func _editor_enter():
	super()
	%Colors.show()

func _editor_exit():
	super()
	%Colors.hide()

func modify_cell(cell_data: MetroidvaniaSystem.MapData.CellData, mode: int) -> bool:
	if mode == MODE_PICK:
		if cell_data.color.a > 0:
			%CurrentColor.color = cell_data.color
	else:
		var target_color := Color.TRANSPARENT
		if mode == MODE_DRAW:
			target_color = %CurrentColor.color
		
		if cell_data.color != target_color:
			var old := cell_data.color
			cell_data.color = target_color
			undo_handle_cell_property(cell_data, &\"color\", old)
			return true
	
	return false
"

[sub_resource type="GDScript" id="GDScript_ujwfx"]
resource_name = "CellSymbol"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/CellPaintEditor.gd\"

var symbol_group: ButtonGroup

func _editor_init() -> void:
	can_pick = true
	super()
	
	symbol_group = ButtonGroup.new()
	reload_symbols()
	MetSys.settings.theme_changed.connect(reload_symbols)
	MetSys.theme_modified.connect(func(changes: Array[String]):
		if \"symbols\" in changes:
			reload_symbols())

func reload_symbols():
	for symbol in %SymbolContainer.get_children():
		symbol.free()
	
	for symbol in MetSys.settings.theme.symbols:
		add_symbol(symbol)

func _editor_enter():
	super()
	%Symbols.show()

func _editor_exit():
	super()
	%Symbols.hide()

func modify_cell(cell_data: MetroidvaniaSystem.MapData.CellData, mode: int) -> bool:
	if mode == MODE_PICK:
		if cell_data.symbol > -1:
			symbol_group.get_buttons()[cell_data.symbol].button_pressed = true
		return false
	
	var target_symbol := -1
	if mode == MODE_DRAW:
		target_symbol = symbol_group.get_pressed_button().get_index()
	
	if cell_data.symbol != target_symbol:
		var old := cell_data.symbol
		cell_data.symbol = target_symbol
		undo_handle_cell_property(cell_data, &\"symbol\", old)
		return true
	
	return false

func add_symbol(texture: Texture2D):
	var button := Button.new()
	button.icon = texture
	button.toggle_mode = true
	button.button_group = symbol_group
	button.add_theme_color_override(&\"icon_pressed_color\", Color.WHITE)
	
	if not symbol_group.get_pressed_button():
		button.button_pressed = true
	
	%SymbolContainer.add_child(button)
"

[sub_resource type="GDScript" id="GDScript_a80ln"]
resource_name = "CellGroup"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/CellPaintEditor.gd\"

var cell_groups: Dictionary
var drawing: int

func _editor_init() -> void:
	super()
	room_only_cursor = true
	overlay_mode = true
	cell_groups = MetSys.map_data.cell_groups
	%CurrentGroup.value_changed.connect(redraw_overlay.unbind(1))

func _update_theme():
	theme_cache.group_color = get_theme_color(&\"group_color\", &\"MetSys\")

func _editor_enter():
	super()
	%Groups.show()

func _editor_exit():
	super()
	%Groups.hide()

func _editor_draw(map_overlay: CanvasItem):
	super(map_overlay)
	
	for p in cell_groups.get(%CurrentGroup.value as int, []):
		if p.z == editor.current_layer:
			map_overlay.draw_rect(Rect2(Vector2(p.x, p.y) * MetSys.CELL_SIZE, MetSys.CELL_SIZE), theme_cache.group_color)

func modify_coords(coords: Vector3i, mode: int) -> bool:
	var current_group: int = %CurrentGroup.value
	
	if mode == MODE_DRAW:
		if not current_group in cell_groups:
			cell_groups[current_group] = []
		
		if not coords in cell_groups[current_group]:
			cell_groups[current_group].append(coords)
			undo_handle_group_add(coords, current_group)
			return true
	else:
		if coords in cell_groups[current_group]:
			cell_groups[current_group].erase(coords)
			undo_handle_group_remove(coords, current_group)
			return true
	
	return false
"

[sub_resource type="GDScript" id="GDScript_ilxbw"]
resource_name = "BorderType"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/BorderPaintEditor.gd\"

var border_group: ButtonGroup

func _editor_init() -> void:
	use_cursor = false
	can_pick = true
	super()
	border_group = ButtonGroup.new()
	
	reload_borders()
	MetSys.settings.theme_changed.connect(reload_borders)
	MetSys.theme_modified.connect(func(changes: Array[String]):
		if \"borders\" in changes or \"vertical_borders\" or \"vertical_borders\" in changes:
			reload_borders())

func reload_borders():
	for symbol in %BorderContainer.get_children():
		symbol.free()
	
	if MetSys.settings.theme.rectangle:
		add_border(MetSys.settings.theme.vertical_wall)
		add_border(MetSys.settings.theme.vertical_passage)
		
		for border in MetSys.settings.theme.vertical_borders:
			add_border(border)
	else:
		add_border(MetSys.settings.theme.wall)
		add_border(MetSys.settings.theme.passage)
		
		for border in MetSys.settings.theme.borders:
			add_border(border)

func _editor_enter():
	super()
	%Borders.show()

func _editor_exit():
	super()
	%Borders.hide()

func modify_border(cell_data: MetroidvaniaSystem.MapData.CellData, border: int, mode: int) -> bool:
	if cell_data.borders[border] == -1:
		return false
	
	if mode == MODE_PICK:
		border_group.get_buttons()[cell_data.borders[border]].button_pressed = true
	else:
		var target_border := 0
		if mode == MODE_DRAW:
			target_border = border_group.get_pressed_button().get_index()
		
		if cell_data.borders[border] != target_border:
			cell_data.borders[border] = target_border
			return true
	
	return false

func add_border(texture: Texture2D):
	var button := Button.new()
	button.icon = texture
	button.toggle_mode = true
	button.button_group = border_group
	button.custom_minimum_size.x = MetSys.CELL_SIZE.x
	button.icon_alignment = HORIZONTAL_ALIGNMENT_RIGHT
	button.add_theme_color_override(&\"icon_pressed_color\", Color.WHITE)
	
	if not border_group.get_pressed_button():
		button.button_pressed = true
	
	%BorderContainer.add_child(button)
"

[sub_resource type="GDScript" id="GDScript_a3fsx"]
resource_name = "BorderColor"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/BorderPaintEditor.gd\"

func _editor_init():
	can_pick = true
	update_neighbors = true
	border_property = &\"border_colors\"
	super()

func _editor_enter():
	super()
	%Colors.show()

func _editor_exit():
	super()
	%Colors.hide()

func modify_border(cell_data: MetroidvaniaSystem.MapData.CellData, border: int, mode: int) -> bool:
	if cell_data.borders[border] == -1:
		return false
	
	if mode == MODE_PICK:
		if cell_data.border_colors[border].a > 0:
			%CurrentColor.color = cell_data.border_colors[border]
	else:
		var target_color := Color.TRANSPARENT
		if mode == MODE_DRAW:
			target_color = %CurrentColor.color
		
		if cell_data.border_colors[border] != target_color:
			cell_data.border_colors[border] = target_color
			return true
	
	return false
"

[sub_resource type="GDScript" id="GDScript_p75ne"]
resource_name = "SceneAssign"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

@onready var file_dialog: FileDialog = $FileDialog
@onready var create_dialog: ConfirmationDialog = $CreateDialog

@onready var scene_name: LineEdit = %SceneName
@onready var scene_extension: OptionButton = %SceneExtension
@onready var root_name: LineEdit = %RootName
@onready var error_label: Label = %ErrorLabel
@onready var assign_uid: CheckBox = %AssignUID
@onready var ok_button := create_dialog.get_ok_button()

func _editor_init() -> void:
	use_cursor = false
	overlay_mode = true
	create_dialog.register_text_enter(scene_name)
	assign_uid.set_pressed_no_signal(MetSys.settings._assign_uid_to_rooms)

func _update_theme():
	theme_cache.assigned_scene = get_theme_color(&\"assigned_scene\", &\"MetSys\")

func _editor_enter():
	super()
	%SceneAssign.show()

func _editor_exit():
	super()
	%SceneAssign.hide()

func _editor_input(event: InputEvent):
	if event is InputEventMouseMotion:
		var hr := highlighted_room
		highlighted_room = MetSys.map_data.get_whole_room(get_coords(get_cursor_pos()))
		if highlighted_room != hr:
			redraw_overlay()

	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT:
			if event.pressed:
				if not highlighted_room.is_empty():
					var settings_root_folder := MetSys.settings.map_root_folder
					if file_dialog.root_subfolder != settings_root_folder:
						if settings_root_folder.ends_with(\"//\"):
							file_dialog.root_subfolder = MetSys.settings.map_root_folder
						else:
							file_dialog.root_subfolder = MetSys.settings.map_root_folder.trim_suffix(\"/\")
					
					file_dialog.popup_centered_ratio(0.6)
		elif event.button_index == MOUSE_BUTTON_RIGHT:
			if event.pressed:
				var prev_scene := clear_scene(highlighted_room)
				if prev_scene.is_empty():
					return
				
				undo_handle_scene_remove(highlighted_room.duplicate(), prev_scene)
				undo_end_with_redraw()
				MetSys.room_assign_updated.emit()
				redraw_overlay()

func _editor_draw(map_overlay: CanvasItem):
	super(map_overlay)

	for coords in MetSys.map_data.assigned_scenes.values():
		if coords[0].z != editor.current_layer:
			continue
		
		for p in coords:
			map_overlay.draw_rect(Rect2(Vector2(p.x, p.y) * MetSys.CELL_SIZE, MetSys.CELL_SIZE), theme_cache.assigned_scene)

	if not highlighted_room.is_empty():
		map_overlay.draw_set_transform_matrix(Transform2D())
		map_overlay.draw_string(get_theme_font(&\"font\", &\"Label\"), Vector2(0, 40),
				editor.get_assigned_scene_display(MetSys.map_data.get_cell_at(highlighted_room.front()).assigned_scene))

func clear_scene(from: Array[Vector3i]) -> String:
	if from.is_empty():
		return \"\"
	
	var current_assigned: String = MetSys.map_data.get_cell_at(from[0]).assigned_scene
	if current_assigned.is_empty():
		return \"\"
	else:
		MetSys.map_data.assigned_scenes.erase(current_assigned)
	
	for p in from:
		MetSys.map_data.get_cell_at(p).assigned_scene = \"\"
	
	return current_assigned

func on_map_selected(path: String) -> void:
	if assign_uid.button_pressed:
		path = ResourceUID.id_to_text(ResourceLoader.get_resource_uid(path))
	else:
		path = path.trim_prefix(MetSys.settings.map_root_folder)
	
	var prev_scene := clear_scene(highlighted_room)
	
	var current_assigned: Array[Vector3i]
	current_assigned.assign(MetSys.map_data.assigned_scenes.get(path, []))
	
	if not current_assigned.is_empty():
		var other_prev_scene := clear_scene(current_assigned)
		undo_handle_scene_remove(current_assigned, other_prev_scene)
	
	MetSys.map_data.assigned_scenes[path] = []
	for coords in highlighted_room:
		MetSys.map_data.get_cell_at(coords).assigned_scene = path
		MetSys.map_data.assigned_scenes[path].append(coords)
	
	undo_handle_scene_add(highlighted_room.duplicate(), prev_scene)
	undo_end_with_redraw()
	
	MetSys.room_assign_updated.emit()
	redraw_overlay()

func create_new_scene() -> void:
	file_dialog.hide()
	create_dialog.popup_centered()
	scene_name.grab_focus.call_deferred()
	
	scene_name.clear()
	validate_scene()

func validate_scene():
	var scene_name_text := scene_name.text
	
	if scene_name_text.is_empty():
		set_error(tr(\"Scene name can't be empty.\"))
		return
	elif not scene_name_text.is_valid_filename():
		set_error(tr(\"Scene name contains invalid characters.\"))
		return
	elif not root_name.text.is_empty() and not root_name.text.is_valid_identifier():
		set_error(tr(\"Root node invalid.\"))
		return
	
	if FileAccess.file_exists(get_scene_path()):
		set_error(tr(\"File already exists.\"))
		return
	
	set_error(\"\")

func set_error(error: String):
	error_label.text = error
	ok_button.disabled = not error.is_empty()

func create_default_scene() -> Node:
	var root := Node2D.new()
	if root_name.text.is_empty():
		root.name = &\"Map\"
	else:
		root.name = root_name.text
	
	var instance: MetroidvaniaSystem.RoomInstance = load(\"uid://bsg0351mx3b4u\").instantiate()
	root.add_child(instance)
	instance.owner = root
	
	return root

func create_scene_confirm() -> void:
	var root: Node
	if not MetSys.settings.scene_template.is_empty():
		var scene: PackedScene = load(MetSys.settings.scene_template)
		if scene:
			root = scene.instantiate()
			if root:
				root.scene_file_path = \"\"
				if not root_name.text.is_empty():
					root.name = root_name.text
			else:
				push_error(\"Failed to instantiate template scene.\")
		else:
			push_error(\"Failed to load template scene.\")
	
	if not root:
		root = create_default_scene()
	
	var scene := PackedScene.new()
	scene.pack(root)
	
	var scene_path := get_scene_path()
	ResourceSaver.save(scene, scene_path)
	root.queue_free()
	
	EditorInterface.get_resource_filesystem().scan()
	EditorInterface.open_scene_from_path(scene_path)
	on_map_selected(scene_path)

func get_scene_name() -> String:
	var neym := scene_name.text
	if not neym.ends_with(\".\"):
		neym += \".\"
	return neym + scene_extension.get_item_text(scene_extension.selected)

func get_scene_path() -> String:
	return file_dialog.current_dir.path_join(get_scene_name())

func can_drop_data(at_position: Vector2, data) -> bool:
	if highlighted_room.is_empty():
		return false
	
	if data.get(\"type\", \"\") != \"files\" or data[\"files\"].size() != 1:
		return false
	
	var file: String = data[\"files\"][0]
	if file.get_extension() != \"tscn\" and file.get_extension() != \"scn\":
		return false
	
	if not file.begins_with(MetSys.settings.map_root_folder):
		return false
	
	return true

func drop_data(at_position: Vector2, data) -> void:
	on_map_selected(data[\"files\"][0])

func _on_assign_uid_toggled(toggled_on: bool) -> void:
	MetSys.settings._assign_uid_to_rooms = toggled_on
"

[sub_resource type="GDScript" id="GDScript_5yej3"]
script/source = "@tool
extends FileDialog

func _ready() -> void:
	if is_part_of_edited_scene():
		return
	
	var create_new := $Button
	create_new.reparent(get_ok_button().get_parent())
	create_new.get_parent().move_child(create_new, 0)

func _validate_property(property: Dictionary) -> void:
	# Hack until Godot handles this properly.
	if property[\"name\"] == \"ok_button_text\" or property[\"name\"] == \"title\":
		property[\"usage\"] = 0
"

[sub_resource type="GDScript" id="GDScript_gb3rf"]
resource_name = "CustomElements"
script/source = "@tool
extends \"res://addons/MetroidvaniaSystem/Database/SubEditor.gd\"

const CustomElement = MetroidvaniaSystem.MapData.CustomElement

var current_element: String
var custom_elements: Dictionary

func _editor_init() -> void:
	room_only_cursor = false
	overlay_mode = true
	custom_elements = MetSys.map_data.custom_elements
	MetSys.settings.custom_elements_changed.connect(reload_custom_elements)
	
	reload_custom_elements()

func _update_theme():
	theme_cache.active_custom_element = get_theme_color(&\"active_custom_element\", &\"MetSys\")
	theme_cache.inactive_custom_element = get_theme_color(&\"inactive_custom_element\", &\"MetSys\")
	theme_cache.custom_element_marker = get_theme_color(&\"custom_element_marker\", &\"MetSys\")

func reload_custom_elements():
	for element in %CustomElementContainer.get_children():
		element.queue_free()
	current_element = \"\"
	
	if not MetSys.settings.custom_elements or MetSys.settings.custom_elements._custom_elements.is_empty():
		%NoElements.show()
		return
	else:
		%NoElements.hide()
	
	var element_group := ButtonGroup.new()
	
	for element in MetSys.settings.custom_elements._custom_elements:
		var button := CheckBox.new()
		button.text = str(element).capitalize()
		button.button_group = element_group
		button.pressed.connect(set_current_element.bind(element))
		%CustomElementContainer.add_child(button)
		
		if not element_group.get_pressed_button():
			button.button_pressed = true
			set_current_element(element)

func _editor_enter():
	%CustomElements.show()

func _editor_exit():
	%CustomElements.hide()

func set_current_element(element: String):
	current_element = element
	redraw_overlay()

func _editor_draw(map_overlay: CanvasItem):
	super(map_overlay)
	
	for coords in custom_elements:
		if coords.z != editor.current_layer:
			continue
		
		var element_color: Color
		var element: CustomElement = custom_elements[coords]
		if element.name == current_element:
			element_color = theme_cache.active_custom_element
		else:
			element_color = theme_cache.inactive_custom_element
		
		map_overlay.draw_rect(Rect2(Vector2(coords.x, coords.y) * MetSys.CELL_SIZE, Vector2(element.size) * MetSys.CELL_SIZE), element_color)
		
		var square := minf(MetSys.CELL_SIZE.x, MetSys.CELL_SIZE.y)
		map_overlay.draw_rect(Rect2((Vector2(coords.x, coords.y) + Vector2(0.5, 0.5)) * MetSys.CELL_SIZE - Vector2.ONE * square * 0.5, Vector2.ONE * square).grow(-square * 0.2), theme_cache.custom_element_marker)

func _editor_input(event: InputEvent):
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT:
			if event.pressed:
				drag_from = get_cursor_pos()
			else:
				var rect := get_rect_between(drag_from, get_cursor_pos())
				add_element(rect)
				undo_end_with_redraw()
				drag_from = Vector2i.MAX
		elif event.button_index == MOUSE_BUTTON_RIGHT:
			if event.pressed:
				var coords := Vector3i(get_cursor_pos().x, get_cursor_pos().y, editor.current_layer)
				if coords in MetSys.map_data.custom_elements:
					undo_handle_element_remove(coords, MetSys.map_data.custom_elements[coords])
					MetSys.map_data.custom_elements.erase(coords)
					editor.current_map_view._update_element_at(coords)
					undo_end_with_redraw()

func add_element(rect: Rect2i):
	var element := CustomElement.new()
	element.name = current_element
	element.size = rect.size
	element.data = %CustomData.text
	
	var coords := Vector3i(rect.position.x, rect.position.y, editor.current_layer)
	MetSys.map_data.custom_elements[coords] = element
	
	undo_handle_element_add(coords, element)
	editor.current_map_view._update_element_at(coords)
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_xiyo8"]
content_margin_left = 4.0
content_margin_right = 4.0
bg_color = Color(0, 0, 0, 0.501961)

[node name="MapEditor" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_right = 813.0
offset_bottom = 448.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_i7yda")
mode_group = SubResource("ButtonGroup_pv7fp")
metadata/_edit_lock_ = true

[node name="Sidebar" type="PanelContainer" parent="."]
custom_minimum_size = Vector2(200, 0)
layout_mode = 2

[node name="ScrollContainer" type="ScrollContainer" parent="Sidebar"]
layout_mode = 2
horizontal_scroll_mode = 0
vertical_scroll_mode = 4

[node name="VBoxContainer" type="VBoxContainer" parent="Sidebar/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Layer" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2
mouse_filter = 2
metadata/_edit_lock_ = true

[node name="Label" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Layer"]
layout_mode = 2
text = "Current Layer"
horizontal_alignment = 1

[node name="CurrentLayer" parent="Sidebar/ScrollContainer/VBoxContainer/Layer" instance=ExtResource("2_rinoa")]
unique_name_in_owner = true
layout_mode = 2

[node name="Label2" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Layer"]
layout_mode = 2
text = "Preview Layer"
horizontal_alignment = 1

[node name="PreviewLayer" parent="Sidebar/ScrollContainer/VBoxContainer/Layer" instance=ExtResource("2_rinoa")]
unique_name_in_owner = true
layout_mode = 2
allow_none = true

[node name="RecenterButton" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Layer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
text = "Recenter View"

[node name="HBoxContainer" type="HBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/Layer"]
layout_mode = 2

[node name="Label" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Layer/HBoxContainer"]
layout_mode = 2
text = "Zoom"

[node name="ZoomSlider" type="HSlider" parent="Sidebar/ScrollContainer/VBoxContainer/Layer/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 4
min_value = 1.0
max_value = 3.0
step = 0.5
value = 1.0

[node name="ZoomValue" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Layer/HBoxContainer"]
unique_name_in_owner = true
auto_translate_mode = 2
layout_mode = 2
text = "x1.0"

[node name="HSeparator" type="HSeparator" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2

[node name="Modes" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2
alignment = 1

[node name="Label" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
text = "Mode"
horizontal_alignment = 1

[node name="RoomLayout" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_pressed = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Room Layout"
script = SubResource("GDScript_dsps8")

[node name="CellColor" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Cell Color"
script = SubResource("GDScript_tlx5u")

[node name="CellSymbol" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Cell Symbol"
script = SubResource("GDScript_ujwfx")

[node name="CellGroup" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Cell Group"
script = SubResource("GDScript_a80ln")

[node name="BorderType" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Border Type"
script = SubResource("GDScript_ilxbw")

[node name="BorderColor" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Border Color"
script = SubResource("GDScript_a3fsx")

[node name="SceneAssign" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Scene Assign"
script = SubResource("GDScript_p75ne")

[node name="FileDialog" type="FileDialog" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign"]
size = Vector2i(600, 400)
file_mode = 0
filters = PackedStringArray("*.tscn,*.scn;Scene File")
script = SubResource("GDScript_5yej3")

[node name="Button" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/FileDialog"]
offset_left = 465.0
offset_top = 35.0
offset_right = 596.0
offset_bottom = 65.0
size_flags_horizontal = 8
size_flags_vertical = 0
text = "Create New Scene"

[node name="CreateDialog" type="ConfirmationDialog" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign"]
title = "Create New Scene"
position = Vector2i(300, 25)
size = Vector2i(400, 166)

[node name="VBoxContainer" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog"]
offset_left = 4.0
offset_top = 4.0
offset_right = 396.0
offset_bottom = 124.0

[node name="GridContainer" type="GridContainer" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog/VBoxContainer"]
layout_mode = 2
columns = 2

[node name="Label" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog/VBoxContainer/GridContainer"]
layout_mode = 2
size_flags_horizontal = 8
text = "Scene Name"

[node name="HBoxContainer" type="HBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog/VBoxContainer/GridContainer"]
layout_mode = 2

[node name="SceneName" type="LineEdit" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog/VBoxContainer/GridContainer/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3

[node name="SceneExtension" type="OptionButton" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog/VBoxContainer/GridContainer/HBoxContainer"]
unique_name_in_owner = true
auto_translate_mode = 2
layout_mode = 2
selected = 0
item_count = 2
popup/item_0/text = "tscn"
popup/item_0/id = 0
popup/item_1/text = "scn"
popup/item_1/id = 1

[node name="Label2" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog/VBoxContainer/GridContainer"]
layout_mode = 2
size_flags_horizontal = 8
text = "Root Name"

[node name="RootName" type="LineEdit" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog/VBoxContainer/GridContainer"]
unique_name_in_owner = true
auto_translate_mode = 2
layout_mode = 2
size_flags_horizontal = 3
placeholder_text = "Map"

[node name="ErrorLabel" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog/VBoxContainer"]
unique_name_in_owner = true
auto_translate_mode = 2
layout_mode = 2
theme_override_colors/font_color = Color(1, 0, 0, 1)

[node name="CustomElements" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_pv7fp")
text = "Custom Elements"
script = SubResource("GDScript_gb3rf")

[node name="HSeparator2" type="HSeparator" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2

[node name="EditControls" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 0
mouse_filter = 2
alignment = 2
metadata/_edit_lock_ = true

[node name="Symbols" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="SymbolContainer" type="HFlowContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Symbols"]
unique_name_in_owner = true
layout_mode = 2

[node name="Borders" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="BorderContainer" type="HFlowContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Borders"]
unique_name_in_owner = true
layout_mode = 2

[node name="Groups" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="Label" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Groups"]
layout_mode = 2
text = "Group ID"
horizontal_alignment = 1

[node name="CurrentGroup" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Groups" instance=ExtResource("2_rinoa")]
unique_name_in_owner = true
layout_mode = 2
mode = 1

[node name="Colors" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="CurrentColor" type="ColorPickerButton" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Colors"]
unique_name_in_owner = true
custom_minimum_size = Vector2(0, 30)
layout_mode = 2
edit_alpha = false

[node name="SceneAssign" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="AssignUID" type="CheckBox" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/SceneAssign"]
unique_name_in_owner = true
layout_mode = 2
tooltip_text = "If enabled, the room will have scene's UID assigned instead of path."
text = "Assign UID"

[node name="Label" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/SceneAssign"]
layout_mode = 2
text = "Click a room or drag and drop a file"
autowrap_mode = 2

[node name="CustomElements" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="HBoxContainer" type="HBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/CustomElements"]
layout_mode = 2

[node name="Label" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/CustomElements/HBoxContainer"]
layout_mode = 2
text = "Data"

[node name="CustomData" type="LineEdit" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/CustomElements/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3

[node name="NoElements" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/CustomElements"]
unique_name_in_owner = true
layout_mode = 2
text = "No Custom Elements Registered"
autowrap_mode = 2

[node name="CustomElementContainer" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/CustomElements"]
unique_name_in_owner = true
layout_mode = 2

[node name="Shortcuts" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
layout_mode = 2

[node name="ShortcutPick" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Shortcuts"]
unique_name_in_owner = true
layout_mode = 2
text = "Ctrl+Click: Pick from map"
autowrap_mode = 2

[node name="ShortcutDrag" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Shortcuts"]
unique_name_in_owner = true
visible = false
layout_mode = 2
text = "Shift+Drag: Move rooms"
autowrap_mode = 2

[node name="ShortcutWhole" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Shortcuts"]
unique_name_in_owner = true
layout_mode = 2
text = "Shift+Click: Set for the whole room"
autowrap_mode = 2

[node name="MapView" type="Control" parent="."]
texture_filter = 1
clip_contents = true
layout_mode = 2
size_flags_horizontal = 3

[node name="ColorRect" type="ColorRect" parent="MapView"]
modulate = Color(0, 0, 0, 0.12549)
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Grid" type="Control" parent="MapView"]
unique_name_in_owner = true
clip_contents = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3

[node name="Map" type="Node2D" parent="MapView"]
unique_name_in_owner = true

[node name="OverlayLayer" type="Control" parent="MapView"]
unique_name_in_owner = true
z_index = 5
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
focus_mode = 2
mouse_filter = 1

[node name="StatusLabel" type="Label" parent="MapView"]
unique_name_in_owner = true
z_index = 5
layout_mode = 0
offset_right = 1.0
offset_bottom = 23.0
mouse_filter = 1
theme_override_styles/normal = SubResource("StyleBoxFlat_xiyo8")
vertical_alignment = 1

[connection signal="value_changed" from="Sidebar/ScrollContainer/VBoxContainer/Layer/PreviewLayer" to="." method="preview_layer_changed"]
[connection signal="file_selected" from="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/FileDialog" to="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign" method="on_map_selected"]
[connection signal="pressed" from="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/FileDialog/Button" to="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign" method="create_new_scene"]
[connection signal="confirmed" from="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog" to="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign" method="create_scene_confirm"]
[connection signal="text_changed" from="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign/CreateDialog/VBoxContainer/GridContainer/HBoxContainer/SceneName" to="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign" method="validate_scene" unbinds=1]
[connection signal="toggled" from="Sidebar/ScrollContainer/VBoxContainer/EditControls/SceneAssign/AssignUID" to="Sidebar/ScrollContainer/VBoxContainer/Modes/SceneAssign" method="_on_assign_uid_toggled"]
[connection signal="draw" from="MapView/Grid" to="." method="_on_grid_draw"]
