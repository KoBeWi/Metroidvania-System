[gd_scene load_steps=8 format=3 uid="uid://df5fuj4vjr11p"]

[ext_resource type="Script" uid="uid://cdl44ebe6tc0h" path="res://addons/MetroidvaniaSystem/Database/MapViewer.gd" id="1_s16ok"]
[ext_resource type="Script" uid="uid://celtpddhdfods" path="res://addons/MetroidvaniaSystem/Scripts/EditorIconButton.gd" id="2_tjngl"]
[ext_resource type="PackedScene" uid="uid://w34y4dyx84y8" path="res://addons/MetroidvaniaSystem/Nodes/LayerSelector.tscn" id="2_yqo4d"]

[sub_resource type="ButtonGroup" id="ButtonGroup_lmh17"]

[sub_resource type="GDScript" id="GDScript_fjyy3"]
resource_name = "Settings"
script/source = "@tool
extends Button

func _ready() -> void:
	if is_part_of_edited_scene():
		return
	
	await get_tree().process_frame
	_pressed()
	
	for data in MetSys.settings._collectible_list:
		var collectible := add_collectible()
		collectible.set_data(data)

func _pressed() -> void:
	for button in button_group.get_buttons():
		button.exit()
	
	%Settings.show()

func exit():
	%Settings.hide()

func add_collectible() -> Control:
	var collectible := preload(\"res://addons/MetroidvaniaSystem/Nodes/CollectibleElement.tscn\").instantiate()
	%CollectibleList.add_child(collectible)
	collectible.save_request.connect(save_collectible_list)
	return collectible

func save_collectible_list():
	var list: Array[Dictionary]
	for collectible in %CollectibleList.get_children():
		if not collectible.is_queued_for_deletion():
			list.append(collectible.get_save_data())
	MetSys.settings._collectible_list = list
	ResourceSaver.save(MetSys.settings)
"

[sub_resource type="GDScript" id="GDScript_dicqo"]
resource_name = "Finder"
script/source = "@tool
extends Button

const FoundElement = preload(\"uid://cdl44ebe6tc0h\").FoundElement

@onready var scan_progress: ProgressBar = %ScanProgress
@onready var show_on_map: CheckButton = %ShowOnMap
@onready var summary: VBoxContainer = %Summary
@onready var scan_button: Button = %ScanButton
@onready var finder: Control = %Finder

var thread: Thread
var found_elements: Array[FoundElement]

func _ready() -> void:
	scan_progress.hide()
	show_on_map.hide()
	exit()

func _pressed() -> void:
	for button in button_group.get_buttons():
		button.exit()
	
	finder.show()

func exit():
	finder.hide()

func start_scan() -> void:
	summary.hide()
	scan_button.disabled = true
	
	var collectible_list: Array[FoundElement]
	collectible_list.assign(%CollectibleList.get_children().map(func(item: Node) -> FoundElement: return item.get_data()))
	
	found_elements.clear()
	for item in summary.get_children():
		item.free()
	
	thread = Thread.new()
	thread.start(scan_maps.bind(collectible_list))
	set_process(true)

func _process(delta: float) -> void:
	if not thread:
		set_process(false)
		return
	
	if thread.is_alive():
		return
	
	thread.wait_to_finish()
	thread = null
	
	scan_progress.hide()
	show_on_map.show()
	summary.show()
	scan_button.disabled = false
	
	for item in %CollectibleList.get_children():
		var data: FoundElement = item.get_data()
		var count := 0
		var count_label := setup_header(data)
		
		for found in found_elements:
			if found.element != data.element:
				continue
			
			count += 1
			setup_found(found)
		
		count_label.text = str(count)
		summary.add_child(HSeparator.new())

func scan_maps(element_list: Array[FoundElement]):
	Thread.set_thread_safety_checks_enabled(false)
	
	var maps: Array[String]
	var folders: Array[String]
	folders.append(MetSys.settings.map_root_folder)
	
	while not folders.is_empty():
		var folder := folders.pop_back()
		folders.append_array(Array(DirAccess.get_directories_at(folder)).map(func(subfolder: String) -> String: return folder.path_join(subfolder)))
		maps.append_array(Array(DirAccess.get_files_at(folder)).map(func(file: String) -> String: return folder.path_join(file)))
	
	scan_progress.max_value = maps.size()
	scan_progress.value = 0
	scan_progress.show()
	show_on_map.hide()
	
	for map in maps:
		var lines := FileAccess.open(map, FileAccess.READ).get_as_text().split(\"\\n\")
		
		var current_element: FoundElement
		for line in lines:
			if current_element:
				if line.begins_with(\"[\"):
					found_elements.append(current_element)
					current_element = null
				elif line.begins_with(\"position =\"):
					current_element.position = str_to_var(line.get_slice(\"=\", 1))
				else:
					continue
			
			for element in element_list:
				if line.begins_with(\"[node name=\\\"%s\" % element.element):
					current_element = element.make_result()
					current_element.map = map
					break
		
		if current_element:
			found_elements.append(current_element)
		
		scan_progress.value += 1

func setup_header(data: FoundElement) -> Label:
	var hbox := HBoxContainer.new()
	summary.add_child(hbox)
	
	var tex := TextureRect.new()
	hbox.add_child(tex)
	tex.texture = data.icon
	
	var label := Label.new()
	hbox.add_child(label)
	label.text = data.element
	
	label = Label.new()
	hbox.add_child(label)
	
	return label

func setup_found(data: FoundElement):
	var label := Label.new()
	summary.add_child(label)
	label.mouse_filter = Control.MOUSE_FILTER_PASS
	label.set_meta(&\"data\", data)
	
	data.map = data.map.trim_prefix(MetSys.settings.map_root_folder)
	
	var room := MetSys.map_data.get_cells_assigned_to(data.map)
	if data.position.is_finite() and not room.is_empty():
		var top_left := Vector2i.MAX
		for coords in room:
			top_left.x = mini(coords.x, top_left.x)
			top_left.y = mini(coords.y, top_left.y)
		
		var pos := top_left + Vector2i(data.position / MetSys.settings.in_game_cell_size)
		data.coords = Vector3i(pos.x, pos.y, room[0].z)
		label.text = \"%s %s\" % [data.map, data.coords]
	else:
		label.text = \"%s\" % data.map
	
	label.mouse_entered.connect(owner._on_item_hover.bind(label))

func toggle_display_on_map(toggled_on: bool) -> void:
	if toggled_on:
		owner.extra_draw = draw_collectibles_on_map
	else:
		owner.extra_draw = Callable()
	owner.map_overlay.queue_redraw()

func draw_collectibles_on_map(canvas_item: CanvasItem):
	for element in found_elements:
		var icon: Texture2D = element.icon
		if not icon:
			continue
		
		var target_size := icon.get_size() * (minf(MetSys.CELL_SIZE.x, MetSys.CELL_SIZE.y) / minf(icon.get_width(), icon.get_height()) * 0.9)
		if element.coords != Vector3i.MAX:
			var coords := element.coords
			if coords.z != owner.current_layer:
				continue
			
			var pos := Vector2(coords.x + owner.map_offset.x, coords.y + owner.map_offset.y) * MetSys.CELL_SIZE
			canvas_item.draw_texture_rect(icon, Rect2(pos + MetSys.CELL_SIZE * 0.5 - target_size * 0.5, target_size), false)
		else:
			for coords in MetSys.map_data.get_cells_assigned_to(element.map):
				if coords.z != owner.current_layer:
					break
				
				var pos := Vector2(coords.x + owner.map_offset.x, coords.y + owner.map_offset.y) * MetSys.CELL_SIZE
				canvas_item.draw_texture_rect(icon, Rect2(pos + MetSys.CELL_SIZE * 0.5 - target_size * 0.5, target_size), false)
				break
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_qbvjg"]
content_margin_left = 4.0
content_margin_right = 4.0
bg_color = Color(0, 0, 0, 0.501961)

[node name="MapViewer" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_s16ok")
metadata/_edit_lock_ = true

[node name="Sidebar" type="PanelContainer" parent="."]
custom_minimum_size = Vector2(200, 0)
layout_mode = 2
size_flags_horizontal = 0

[node name="ScrollContainer" type="ScrollContainer" parent="Sidebar"]
layout_mode = 2
horizontal_scroll_mode = 0
vertical_scroll_mode = 4

[node name="VBoxContainer" type="VBoxContainer" parent="Sidebar/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Layer" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2
mouse_filter = 2

[node name="Label" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Layer"]
layout_mode = 2
text = "Current Layer"
horizontal_alignment = 1

[node name="CurrentLayer" parent="Sidebar/ScrollContainer/VBoxContainer/Layer" instance=ExtResource("2_yqo4d")]
unique_name_in_owner = true
layout_mode = 2

[node name="RecenterButton" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Layer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
text = "Recenter View"

[node name="HBoxContainer" type="HBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/Layer"]
layout_mode = 2

[node name="Label" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Layer/HBoxContainer"]
layout_mode = 2
text = "Zoom"

[node name="ZoomSlider" type="HSlider" parent="Sidebar/ScrollContainer/VBoxContainer/Layer/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 4
min_value = 1.0
max_value = 3.0
step = 0.5
value = 1.0

[node name="ZoomValue" type="Label" parent="Sidebar/ScrollContainer/VBoxContainer/Layer/HBoxContainer"]
unique_name_in_owner = true
auto_translate_mode = 2
layout_mode = 2
text = "x1.0"

[node name="MappedCheckbox" type="CheckButton" parent="Sidebar/ScrollContainer/VBoxContainer/Layer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
text = "Preview Mapped"

[node name="HSeparator" type="HSeparator" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2

[node name="Modes" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2

[node name="Settings" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_pressed = true
button_group = SubResource("ButtonGroup_lmh17")
text = "Collectible Settings"
script = SubResource("GDScript_fjyy3")

[node name="Finder" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/Modes"]
layout_mode = 2
toggle_mode = true
button_group = SubResource("ButtonGroup_lmh17")
text = "Collectible Finder"
script = SubResource("GDScript_dicqo")

[node name="HSeparator2" type="HSeparator" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2

[node name="EditControls" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="Settings" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2
size_flags_vertical = 3

[node name="ScrollContainer" type="ScrollContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Settings"]
layout_mode = 2
size_flags_vertical = 3
vertical_scroll_mode = 2

[node name="CollectibleList" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Settings/ScrollContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3

[node name="Button" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Settings"]
layout_mode = 2
icon_alignment = 1
script = ExtResource("2_tjngl")
icon_name = "Add"

[node name="Finder" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls"]
unique_name_in_owner = true
visible = false
layout_mode = 2
size_flags_vertical = 3

[node name="ScanButton" type="Button" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Finder"]
unique_name_in_owner = true
layout_mode = 2
text = "Scan Maps"

[node name="ScanProgress" type="ProgressBar" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Finder"]
unique_name_in_owner = true
visible = false
layout_mode = 2

[node name="ShowOnMap" type="CheckButton" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Finder"]
unique_name_in_owner = true
visible = false
layout_mode = 2
text = "Display on Map"

[node name="ScrollContainer" type="ScrollContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Finder"]
layout_mode = 2
size_flags_vertical = 3
horizontal_scroll_mode = 3
vertical_scroll_mode = 2

[node name="Summary" type="VBoxContainer" parent="Sidebar/ScrollContainer/VBoxContainer/EditControls/Finder/ScrollContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 0

[node name="MapView" type="Control" parent="."]
texture_filter = 1
clip_contents = true
layout_mode = 2
size_flags_horizontal = 3

[node name="ColorRect" type="ColorRect" parent="MapView"]
modulate = Color(0, 0, 0, 0.12549)
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="Map" type="Node2D" parent="MapView"]
unique_name_in_owner = true

[node name="OverlayLayer" type="Control" parent="MapView"]
unique_name_in_owner = true
z_index = 5
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
focus_mode = 2
mouse_filter = 1

[node name="StatusLabel" type="Label" parent="MapView"]
unique_name_in_owner = true
z_index = 5
layout_mode = 0
offset_right = 1.0
offset_bottom = 23.0
mouse_filter = 1
theme_override_styles/normal = SubResource("StyleBoxFlat_qbvjg")
vertical_alignment = 1

[connection signal="toggled" from="Sidebar/ScrollContainer/VBoxContainer/Layer/MappedCheckbox" to="." method="toggle_mapped"]
[connection signal="pressed" from="Sidebar/ScrollContainer/VBoxContainer/EditControls/Settings/Button" to="Sidebar/ScrollContainer/VBoxContainer/Modes/Settings" method="add_collectible"]
[connection signal="pressed" from="Sidebar/ScrollContainer/VBoxContainer/EditControls/Finder/ScanButton" to="Sidebar/ScrollContainer/VBoxContainer/Modes/Finder" method="start_scan"]
[connection signal="toggled" from="Sidebar/ScrollContainer/VBoxContainer/EditControls/Finder/ShowOnMap" to="Sidebar/ScrollContainer/VBoxContainer/Modes/Finder" method="toggle_display_on_map"]
