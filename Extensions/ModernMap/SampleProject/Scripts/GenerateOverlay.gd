## Generates room overlays to use with Modern Map extension.
##
## To use this script, run it with the desired room scene open. E.g. running this script in StartingPoint.tscn will generate overlay for this scene. The overlay is generated by taking the TileMap node and using 2 layers. First layer is used as "walls" and second layer is used as "background". The walls will make outlined transparent area, while background will make a pattern. The generated overlay is grayscale. Note that this is just example overlay generator. For more sophisticated map previews, you need to make your own or draw them manually or use other means.
## [br][br]You can generate overlays for all registered rooms by using `GenerateAllOverlays.gd` script.
@tool
extends EditorScript

## Controls how detailed is the overlay. Higher value means more details, but also bigger size and longer generation time. Value of [code]1[/code] means one pixel in the overlay corresponds to one tile, while higher values gives more pixels per tile.
const DETAILS = 2

func _run() -> void:
	var instance: MetroidvaniaSystem.RoomInstance = get_scene().get_node_or_null(^"RoomInstance")
	if not instance:
		push_warning("Scene is missing RoomInstance.")
		return
	
	var selected_tilemaps: Array[TileMapLayer]
	selected_tilemaps.assign(get_scene().find_children("*", "TileMapLayer"))
	if selected_tilemaps.size() < 2:
		push_warning("At least 2 TileMapLayers are required.")
		return
	
	var tile_size := selected_tilemaps[0].tile_set.tile_size
	var size: Vector2i = Vector2i(instance.get_size()) / tile_size * DETAILS
	var tiles_per_cell := Vector2i(MetSys.settings.in_game_cell_size) / tile_size * DETAILS
	var used_room_cells := instance.get_local_cells()
	var image := Image.create(size.x, size.y, false, Image.FORMAT_RGBA8)
	
	var tmcells := selected_tilemaps[0].get_used_cells()
	var tmcells2 := selected_tilemaps[1].get_used_cells()
	
	for y in size.y:
		for x in size.x:
			if not Vector2i(x, y) / tiles_per_cell in used_room_cells:
				continue
			
			if not check_cell(Vector2i(x, y), tmcells):
				var v: float
				if check_cell(Vector2i(x + 1, y), tmcells) or check_cell(Vector2i(x - 1, y), tmcells) or check_cell(Vector2i(x, y + 1), tmcells) or check_cell(Vector2i(x, y - 1), tmcells):
					v = 1.0
				elif check_cell(Vector2i(x, y), tmcells2):
					v = 0.3 + absf(sin(x % 10 * 0.1 * TAU) * 0.1)
				else:
					v = 0.5 + absf(sin(y % 10 * 0.1 * TAU) * 0.1)
				
				image.set_pixel(x, y, Color.from_hsv(0, 0, v))
	
	var room_name := get_scene().scene_file_path.get_file()
	image.save_png(preload("uid://bjss5frdrne0k").OVERLAYS_PATH.path_join(room_name) + ".png")

func check_cell(vec: Vector2i, cells: Array[Vector2i]) -> bool:
	if DETAILS == 1:
		return vec in cells
	else:
		vec /= DETAILS
		return vec in cells
